# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\Klaus\Desktop\DCOP\test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import sys
import os
path = os.path.dirname(os.path.dirname(__file__))
sys.path.append(path+'/DCOPPharse/')
sys.path.append(path+'/CycleQueue/')
sys.path.append(path+'/DCOPGenetor/')
sys.path.append(path+'/DPOP/')
sys.path.append(path+'/DSA/')
# sys.path.append('c:\\Users\\Klaus\\Desktop\\DCOP\\DCOPPharse\\')
# sys.path.append('c:\\Users\\Klaus\\Desktop\\DCOP\\CycleQueue\\')
# sys.path.append('c:\\Users\\Klaus\\Desktop\\DCOP\\DCOPGenetor\\')
# sys.path.append('c:\\Users\\Klaus\\Desktop\\DCOP\\DPOP\\')
from PyQt5 import QtCore, QtGui, QtWidgets
from GUIGenetor import *
from multiprocessing import Process
from DCOPGenetor import *

from ProblemParse import *
from graphviz import Graph,Digraph
from Problem import *
from AgentManagerCycle import *
from MessageMailerCycle import *


import matplotlib.pylab as plt # 导入绘图包
import matplotlib.pyplot as mp
import numpy as np
# plt.rcParams['font.sans-serif']=['SimHei']



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 600)
        MainWindow.setAcceptDrops(False)
        MainWindow.setToolTip("")
        MainWindow.setWhatsThis("")
        MainWindow.setAutoFillBackground(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.filename = path + '/RandomDCOP_10_10_1.xml'
        self.total = []
        self.nccc = []
        self.file = []
        self.dpop = {}
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 40, 121, 21))
        self.label.setObjectName("label")
        self.peobleminput = QtWidgets.QLineEdit(self.centralwidget)
        self.peobleminput.setGeometry(QtCore.QRect(140, 40, 421, 21))
        self.peobleminput.setInputMask("")
        self.peobleminput.setCursorPosition(55)
        self.peobleminput.setObjectName("peobleminput")
        self.open = QtWidgets.QPushButton(self.centralwidget)
        self.open.setGeometry(QtCore.QRect(580, 40, 93, 28))
        self.open.setObjectName("open")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 80, 111, 16))
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(140, 80, 87, 22))
        self.comboBox.setEditable(True)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 160, 72, 15))
        self.label_3.setObjectName("label_3")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(140, 150, 81, 31))
        self.spinBox.setMaximum(10000)
        self.spinBox.setProperty("value", 800)
        self.spinBox.setObjectName("spinBox")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(240, 160, 72, 15))
        self.label_4.setObjectName("label_4")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(330, 151, 70, 31))
        self.doubleSpinBox.setProperty("value", 40)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(40, 200, 201, 19))
        self.checkBox.setObjectName("checkBox")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 230, 761, 341))
        self.textEdit.setObjectName("textEdit")
        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(230, 200, 161, 19))
        self.checkBox_2.setObjectName("checkBox_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu_2.addAction(self.action_2)
        self.menu_3.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(430, 160, 72, 15))
        self.label_5.setObjectName("label_5")
        self.spinBox_2 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_2.setGeometry(QtCore.QRect(510, 151, 46, 31))
        self.spinBox_2.setProperty("value", 10)
        self.spinBox_2.setObjectName("spinBox_2")
        self.action_4 = QtWidgets.QAction(MainWindow)
        self.action_4.setObjectName("action_4")
        
        self.menu.addAction(self.action_4)
        self.checkBox_2.setVisible(False)

        self.menubar.triggered[QtWidgets.QAction].connect(self.test)
    
        self.open.clicked.connect(self.openfile)
        self.comboBox.currentIndexChanged.connect(self.change)

        self.retranslateUi(MainWindow)
        self.comboBox.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def test(self,q):
        t = q.text()
        if t == '运行':
            print('运行')
            self.run()
        elif t == '问题生成':
            print('问题生成')
            self.problemgenetor()

        elif t == '打开目录':
            self.opendir()
            # self.label_5.setVisible(True)
            # self.spinBox_2.setVisible(True)
            # self.checkBox_2.setVisible(True)
            if os.path.isdir(self.filename):
                self.label_5.setVisible(True)
                self.spinBox_2.setVisible(True)
                self.checkBox_2.setVisible(True)
            if self.comboBox.currentText() == 'DSA':
            #print('hello')
                self.checkBox_2.setVisible(False)
        else:
            dialog=QtWidgets.QDialog()
        # btn=QtWidgets.QPushButton('ok',dialog)
        # #移动按钮，设置dialog的标题
        # btn.move(50,50)
        # dialog.setWindowTitle("Dialog")
        # #设置窗口的属性为ApplicationModal模态，用户只有关闭弹窗后，才能关闭主界面
        # dialog.setWindowModality(QtCore.Qt.ApplicationModal)
        # dialog.exec_()

            reply = QtWidgets.QMessageBox.information(dialog, 'DCOP验证平台','本平台是重庆大学计算机学院本科生毕业设计课题！欢迎使用！',QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,QtWidgets.QMessageBox.Yes)

        

    def run(self):
        sn = ''
        if os.path.isdir(self.filename):
            self.textEdit.clear()
            num = self.spinBox.value()   #迭代次数
            gai = self.doubleSpinBox.value()   #概率
            agein = self.spinBox_2.value()   #重复次数
            gai = gai / 100.00
            files= os.listdir(self.filename)
            s = self.comboBox.currentText()
            
            self.file.clear()
            self.total.clear()
            self.dpop.clear()
            for f in files:
                

                name = self.filename + '/' + f
                print(name)
                parser=ProblemParser(name, "DFS")
                problem=parser.parse()
                
                if s == 'DSA':
                    
                    for i in range(0,agein):
                        agentManagerCycle = AgentManagerCycle(problem,'DSA_A',num,gai)
                        msgMailer = MessageMailerCycle(agentManagerCycle,'DSA_A')
                        msgMailer.startProcess()
                        msgMailer.initWait()   #为避免出现Agent线程开始而Mailer未初始化完成而出现错误
                        agentManagerCycle.startAgents(msgMailer)
                        msgMailer.join()
                        t = f + ':  ' +str(i+1) + '轮' + '\n'
                        for g in msgMailer.re.keys():
                            t += str(g) + msgMailer.re[g] +'\n'
                        sn = sn + t
                        # self.textEdit.setText(t)
                        self.textEdit.append(t)
                        self.total.append(msgMailer.totalCostInCycle)
                        
                    
                    data = []
                    for i in range(0,num):
                        l = 0
                        for j in range(0,agein):
                            l += self.total[j][i]
                            #format(RunningTime / agein,'0.3f')
                        data.append(l/agein)
                    self.file.append(data)
                elif s == 'DPOP':
                    time = []
                    msgsize = []
                    nccc = []  #nccc展示预留接口
                    time.clear()
                    msgsize.clear()
                    for i in range(0,agein):

                        agentManagerCycle = AgentManagerCycle(problem,'DPOP',num,gai)
                        msgMailer = MessageMailerCycle(agentManagerCycle,'DPOP')
                        msgMailer.startProcess()
                        msgMailer.initWait()   #为避免出现Agent线程开始而Mailer未初始化完成而出现错误
                        agentManagerCycle.startAgents(msgMailer)
                        msgMailer.join()
                        t = f + ':  ' +str(i+1) + '轮' + '\n'
                        for i in msgMailer.re.keys():
                            t += str(i) + str(msgMailer.re[i]) +'\n'
                        sn = sn + t
                        self.textEdit.append(t) 
                        time.append(float(msgMailer.re['RunningTime:'].split('s')[0]))
                        msgsize.append(int(msgMailer.re['total:'].split('byte')[0]))

                    RunningTime = 0.00
                    total = 0
                    for i in range (0,agein):
                        RunningTime += time[i]
                        total += msgsize[i]
                    RunningTime = format(RunningTime / agein,'0.3f')
                    total = total / agein
                    #self.dpop[msgMailer.re['totalTime']] = msgMailer.re[RunningTime]
                    self.dpop[len(agentManagerCycle.agents)] = (str(RunningTime),str(total))

            if s == 'DSA':
                test = []
                die = len(self.file)
                
                for i in range(0,num):
                    l = 0.0
                    for j in range(0,die):
                        l += self.file[j][i]
                    test.append(format(l/die,'0.3f'))

                self.showcost(test)
                    #print(msgMailer.totalCostInCycle)
            if s == 'DPOP':
                self.dpopshow(self.dpop)


        else:
            num = self.spinBox.value()
            gai = self.doubleSpinBox.value()
            agein = self.spinBox_2.value()
            gai = gai / 100.00
            
            parser=ProblemParser(self.filename, "DFS")
            problem=parser.parse()
            t = self.checkBox.isChecked()
            k = self.checkBox_2.isChecked()
            s = self.comboBox.currentText()

            if t == True:
                g = graph(problem)
                print('lll')
                g.view(path+'/Graph/process.gv')
            if k == True:
                h = DFSgraph(problem)
                h.view(path+'/Graph/DFS.gv')
            if s == 'DSA':
                self.textEdit.clear()
                for i in range(0,agein):
                    agentManagerCycle = AgentManagerCycle(problem,'DSA_A',num,gai)
                    msgMailer = MessageMailerCycle(agentManagerCycle,'DSA_A')
                    msgMailer.startProcess()
                    msgMailer.initWait()   #为避免出现Agent线程开始而Mailer未初始化完成而出现错误
                    agentManagerCycle.startAgents(msgMailer)
                    msgMailer.join()
                    t = str(i+1) + '轮' + '\n'
                    for i in msgMailer.re.keys():
                        t += str(i) + msgMailer.re[i] +'\n'
                    sn = sn + t
                    self.textEdit.append(t)
                    self.total.append(msgMailer.totalCostInCycle)
                #print(msgMailer.totalCostInCycle)
                data = []
                #print(self.total)
                for i in range(0,num):
                    l = 0
                    for j in range(0,agein):
                        #print(i,j)
                        l += self.total[j][i]
                    
                    data.append(format(l/agein,'0.3f'))
                self.showcost(data)
            elif s=='DPOP':
                self.textEdit.clear()
                agentManagerCycle = AgentManagerCycle(problem,'DPOP',num,gai)
                msgMailer = MessageMailerCycle(agentManagerCycle,'DPOP')
                msgMailer.startProcess()
                msgMailer.initWait()   #为避免出现Agent线程开始而Mailer未初始化完成而出现错误
                agentManagerCycle.startAgents(msgMailer)
                msgMailer.join()
                t = ''
                for i in msgMailer.re.keys():
                    t += str(i) + str(msgMailer.re[i]) +'\n'
                sn = sn + t
                self.textEdit.append(t)
        curr_time = datetime.datetime.now()
        n = str(curr_time.year)+'-'+str(curr_time.month)+'-'+str(curr_time.day)+'-'+str(curr_time.hour)+'-'+str(curr_time.minute)+'-'+str(curr_time.second)
        filepath = path+'/result/'+self.comboBox.currentText()+'_'+n
        folder = os.path.exists(filepath)
        if not folder:                   #判断是否存在文件夹如果不存在则创建为文件夹
            os.makedirs(filepath) 
        f = open(filepath+'/result.txt','w')
        f.write(sn)

        

    def dpopshow(self,data):
        x1 = []
        y1 = []
        for i in data.keys():
            x1.append(float(i))
            y1.append(float(data[i][0]))
        plt.figure(figsize=(22, 10))
        plt.subplot(3,1,1)
        plt.title("runningtime-agents",size=30)
        
        k = int(float(y1[-1]) /1.0 )+2
        plt.ylim((0, k))
        #my_y_ticks = np.arange(0, k, 2)
        #plt.yticks(my_y_ticks)
        plt.plot(x1, y1, label='time changes', linewidth=2, color='r', marker='o',
            markerfacecolor='blue', markersize=5)
        plt.title("runningtime-changes",size=30)
        for i in range(0,len(x1)):
            plt.text(x1[i],y1[i],y1[i],fontdict={'fontsize':14})
        plt.xlabel('agents',size=30)
        plt.ylabel('runningtime',size=30)
            
        # 设置数字标签
        # for a, b in zip(x1, y1):
        #     plt.text(a, b, b, ha='center', va='bottom', fontsize=8)
        x2 = []
        y2 = []

        plt.subplot(3,1,3)
        
        for i in data.keys():
            x2.append(i)
            y2.append(float(data[i][1]))
        #print(y2)
        plt.title("msgsize-agents",size=30)
        l = int(float(y2[-1]) /1.0 )+2
        plt.ylim((0, l))
        #print(l)
        plt.plot(x2, y2, label='msgsize changes', linewidth=2, color='r', marker='o',
            markerfacecolor='blue', markersize=5)
        for i in range(0,len(x1)):
            plt.text(x2[i],y2[i],y2[i],fontdict={'fontsize':14})
        plt.xlabel('agents',size=30)
        plt.ylabel('msgsize',size=30)



            
        plt.legend()
        plt.show()
        
    def showcost(self,data):
        num = self.spinBox.value()
        
        begin = 0
        x1 = []
        y1 = []
        kill = 0
        # print(x1)
        # print(y1)
        #print(data)
        while begin <int(self.spinBox.value()):
            #print(begin)
            g = data[int(begin)]
           
            if begin !=0 and y1[-1] == float(g):
                kill += 1
                #print(kill)
            else:
                kill = 0
            y1.append(float(g))
            x1.append(begin)
            begin = begin + 1
            
            if kill == 10:
                break
        



        # print(x1)
        # print(y1)
        plt.figure(figsize=(22, 4))
        plt.title("cost-cycle",size=20)
        plt.plot(x1, y1, label='cost changes', linewidth=2, color='r', marker='o',
            markerfacecolor='blue', markersize=5)
        plt.xlabel('cycle',size=20)

        # 纵坐标描述
        plt.ylabel('cost',size=20)
            
        # 设置数字标签
        # for a, b in zip(x1, y1):
        #     plt.text(a, b, b, ha='center', va='bottom', fontsize=8)
        # for i in range(0,len(x1)):
        #     plt.text(x1[i],y1[i],y1[i],fontdict={'fontsize':14})
        plt.legend()
        plt.show()


    def problemgenetor(self):
        thread = Process(target=task)
        thread.start()
        #thread.join()   


         
        

    def openfile(self):
        self.filename, filetype = QtWidgets.QFileDialog.getOpenFileName(None,  
                                    "选取文件",  
                                    path, # 起始路径 
                                    "All Files (*);;Text Files (*.xml)")   # 设置文件扩展名过滤,用双分号间隔
       
        print(self.filename)
        self.peobleminput.setText(self.filename)
        if not os.path.isdir(self.filename) and self.comboBox.currentText() == 'DPOP':
                self.label_5.setVisible(False)
                self.spinBox_2.setVisible(False)
                self.checkBox_2.setVisible(False)


        

    def opendir(self):
        self.filename = QtWidgets.QFileDialog.getExistingDirectory(None,  
                                    "选取文件夹",  
                                    path, # 起始路径 
                                    )   # 设置文件扩展名过滤,用双分号间隔

        print(self.filename)
        self.peobleminput.setText(self.filename)
        


    def change(self):
        
        t = self.comboBox.currentText()
        print(self.comboBox.currentText())
        if t == 'DSA':
            self.checkBox_2.setVisible(False)
            self.label_3.setVisible(True)
            self.label_4.setVisible(True)
            self.spinBox.setVisible(True)
            self.doubleSpinBox.setVisible(True)
            self.label_5.setVisible(True)
            self.spinBox_2.setVisible(True)
        elif t == 'DPOP':
            if os.path.isdir(self.filename):
                self.label_3.setVisible(False)
                self.label_4.setVisible(False)
                self.spinBox.setVisible(False)
                self.doubleSpinBox.setVisible(False)
                self.label_5.setVisible(True)
                self.spinBox_2.setVisible(True)
                self.checkBox_2.setVisible(True)
            else:
                self.label_3.setVisible(False)
                self.label_4.setVisible(False)
                self.spinBox.setVisible(False)
                self.doubleSpinBox.setVisible(False)
                self.label_5.setVisible(False)
                self.spinBox_2.setVisible(False)
                self.checkBox_2.setVisible(True)



            


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "基于Python的DCOP算法验证平台"))
        self.label.setText(_translate("MainWindow", "请选择问题："))
        self.peobleminput.setText(_translate("MainWindow", path + "/RandomDCOP_10_10_1.xml"))
        self.open.setText(_translate("MainWindow", "打开"))
        self.label_2.setText(_translate("MainWindow", "算     法："))
        self.comboBox.setCurrentText(_translate("MainWindow", "DSA"))
        self.comboBox.setItemText(0, _translate("MainWindow", "DSA"))
        self.comboBox.setItemText(1, _translate("MainWindow", "DPOP"))
        self.label_3.setText(_translate("MainWindow", "迭代次数："))
        self.label_4.setText(_translate("MainWindow", "选择概率："))
        self.checkBox.setText(_translate("MainWindow", "是否显示问题约束图"))
        self.menu.setTitle(_translate("MainWindow", "运行"))
        self.menu_2.setTitle(_translate("MainWindow", "关于"))
        self.menu_3.setTitle(_translate("MainWindow", "问题生成"))
        self.action.setText(_translate("MainWindow", "运行"))
        self.action_2.setText(_translate("MainWindow", "关于本平台"))
        self.action_3.setText(_translate("MainWindow", "问题生成"))
        self.label_5.setText(_translate("MainWindow", "重复次数："))
        self.action_4.setText(_translate("MainWindow", "打开目录"))
        self.checkBox_2.setText(_translate("MainWindow", "是否显示伪树图"))

def task():
    a=QtWidgets.QApplication(sys.argv) 
    z=QtWidgets.QMainWindow()  #注意，这里和我们一开始创建窗体时使用的界面类型相同  
    ui=Ui_DCOPGenetor()    
    ui.setupUi(z)    
    z.show()    
    sys.exit(a.exec_())
if __name__=="__main__":
    app=QtWidgets.QApplication(sys.argv) 
    formObj=QtWidgets.QMainWindow()  #注意，这里和我们一开始创建窗体时使用的界面类型相同  
    ui=Ui_MainWindow()    
    ui.setupUi(formObj)    
    formObj.show() 
    
    sys.exit(app.exec_()) 